RELEASE NOTES:
--------------

-------------------------------------------------
v2018.7
-------------------------------------------------
Finally! Our next, and last, UCC release! We have 
decided to focus on UCC-Java, so that it has all 
the features UCC currently does. Hence, I have 
decided to make this release available to 
everyone.

Many of you may know or noticed that I, Anandi 
Hira, have been managing the UCC activities at 
USC for a while. It is almost time for me to 
graduate from USC. Therefore, more and more, 
you will notice Elaine Venson taking over the UCC
activities at USC.


Onto the release, below are the major changes 
since 2017.01.

Feature Enhancements:

    Maintainability Index calculation
    Function-level Differencing 
        (functions/modules within a source file)
    Re-implemented the extfile functionality in 
        the GUI
    New compilation flag added for g++ in Unix

Bug Fixes:

    Fixed issue where UCC was not working for 
        Scala input files
    Fixed CAdaCounter bug that accessed invalid 
        stack elements
    Fixed issues with incorrect counting of 
        quotes
    Fixed issue with differencing not returning 
        values for Unmodified lines




-------------------------------------------------
v2017.1
-------------------------------------------------
New Features

    Objective C parser
    Cyclomatic complexity support for Midas 
    	languages
    Option to specify non-default comment 
    	delimiters
    Allow file filters in a file, as an 
    	alternative to the current filespecs 
    	option
    Customization of report headers
    Visual differencing only includes modified files

 
Note for GUI users: The modification of extensions
does not currently work for the GUI 




-------------------------------------------------
v2015.12 and v2015.12.2
-------------------------------------------------
With the help of this release's major 
contributor, Randy Maxwell, UCC now has 
multi-threading capability! This version of UCC 
also has some impressive performance improvements 
with respect to RAM consumption and run time.

Additional new features include:

    Cyclomatic Complexity Ring 4 results for 
      	C++, Java, C#, and Scala

    New Language Support
        Assembly (NASM, MASM, GAS, MIPS, PowerPC)
        COBOL
        IDL
        P/L SQL
        Scala

Details on additional features and bug fixes are 
in the Release Notes.

Note on COBOL parser: This is a very preliminary 
version of the parser. Since we did not get 
direct user feedback, we want to get feedback 
in the form of bugs and defects to finally 
support COBOL for you!

Note for GUI: Using the GUI requires for you to 
have a blank fileList.txt in the location the GUI
Executable is created after building in Qt for
successful execution.